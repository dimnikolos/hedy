start: _EOL* statement+

statement: if_statement elif_statement* else_statement?
         | repeat
         | ranged_loop
         | assignment _EOL+
         | print _EOL+

statement_block: _INDENT statement+ _DEDENT

if_statement: "if" expression ":" _EOL statement_block
elif_statement: "elif" expression ":" _EOL statement_block
else_statement: "else" ":" _EOL statement_block

repeat: "repeat" expression "times" ":" _EOL statement_block

ranged_loop: "for" NAME "in" "range" "(" expression "," expression ")" ":" _EOL statement_block

assignment: NAME "is" expression
          | NAME "is" list
          | NAME "is" ask

list: (expression ",")+ expression

?expression: sum
           | expression "="  sum -> eq
           | expression "!=" sum -> ne
           | expression "<=" sum -> le
           | expression ">=" sum -> ge
           | expression "<"  sum -> lt
           | expression ">"  sum -> gt

?sum: product
    | sum "+" product -> addition
    | sum "-" product -> substraction

?product: atom
        | product "*" atom -> multiplication
        | product "/" atom -> division
        | product "%" atom -> modulo

?atom: "+" atom -> unary_plus
     | "-" atom -> unary_minus
     | NAME
     | NUMBER
     | STRING
     | "(" expression? ")" -> parenthesis
     | NAME "at" atom -> list_access

print: "print" "(" [(expression ",")* expression] ")"
ask: "ask" "(" [(expression ",")* expression] ")"

_EOL: /(\r?\n[\t ]*)+/ 

SINGLE_QUOTED_STRING  : /'[^']*'/
STRING: SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING

%import common.WS_INLINE
%import common.NUMBER -> NUMBER
%import common.FLOAT -> FLOAT
%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> DOUBLE_QUOTED_STRING 

%declare _INDENT _DEDENT

%ignore WS_INLINE 

