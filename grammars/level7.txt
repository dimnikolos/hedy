start: program
program: _EOL* command+

command: ifs else?
         | repeat
         | assign _EOL+
         | print _EOL+
         | ask _EOL+

ifs: "if " equality_check _EOL indent command+ dedent
else: " else " _EOL INDENT command+ dedent
equality_check: text " is " text (" and " equality_check)* -> equality_check
repeat: "repeat " number " times" _EOL indent command+ dedent
assign : var " is " expression

print: "print " (quoted_text | var) (" " (quoted_text | var))*
ask: NAME " is ask " expression -> ask

indent: INDENT -> indent
dedent: DEDENT -> dedent

?expression: product
   | expression "+" product -> addition
   | expression "-" product -> substraction

?product: atom
    | product "*" atom -> multiplication
    | product "/" atom -> division

?atom: number | textwithoutspaces //TODO: means we cannot assign strings with spaces? would we want that?



number: INTEGER -> number
text: (LETTER | DIGIT)+ -> text //TODO accents need to be brought back

NAME: /(?!(if|repeat|print)\b)[a-z_][a-z0-9]*/i
var: NAME -> var

// name can be anything that isn't a keyword
// TODO: at one point we need to tell kids this isn't possible :)

_EOL: /(\r?\n[\t ]*)+/

quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \

textwithoutspaces: /([^\n, *+-\/]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)


QUOTE: "'"

%import common.LETTER   // imports from terminal library
%import common.DIGIT   // imports from terminal library
%import common.WS_INLINE
%import common.SIGNED_INT -> INTEGER
//%import common.CNAME -> NAME
%import common._STRING_ESC_INNER


%declare INDENT DEDENT

